import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/react-window/dist/react-window.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
function pe(e) {
  let t = e;
  for (; t; ) {
    if (t.dir)
      return t.dir === "rtl";
    t = t.parentElement;
  }
  return false;
}
function xe(e, t) {
  const [s, r] = (0, import_react.useState)(t === "rtl");
  return (0, import_react.useLayoutEffect)(() => {
    e && (t || r(pe(e)));
  }, [t, e]), s;
}
var J = typeof window < "u" ? import_react.useLayoutEffect : import_react.useEffect;
function ne(e) {
  if (e !== void 0)
    switch (typeof e) {
      case "number":
        return e;
      case "string": {
        if (e.endsWith("px"))
          return parseFloat(e);
        break;
      }
    }
}
function ge({
  box: e,
  defaultHeight: t,
  defaultWidth: s,
  disabled: r,
  element: o,
  mode: n,
  style: l
}) {
  const { styleHeight: c, styleWidth: i } = (0, import_react.useMemo)(
    () => ({
      styleHeight: ne(l == null ? void 0 : l.height),
      styleWidth: ne(l == null ? void 0 : l.width)
    }),
    [l == null ? void 0 : l.height, l == null ? void 0 : l.width]
  ), [f, d] = (0, import_react.useState)({
    height: t,
    width: s
  }), p = r || n === "only-height" && c !== void 0 || n === "only-width" && i !== void 0 || c !== void 0 && i !== void 0;
  return J(() => {
    if (o === null || p)
      return;
    const T = new ResizeObserver((w) => {
      for (const V of w) {
        const { contentRect: O, target: g } = V;
        o === g && d((b) => b.height === O.height && b.width === O.width ? b : {
          height: O.height,
          width: O.width
        });
      }
    });
    return T.observe(o, { box: e }), () => {
      T == null ? void 0 : T.unobserve(o);
    };
  }, [e, p, o, c, i]), (0, import_react.useMemo)(
    () => ({
      height: c ?? f.height,
      width: i ?? f.width
    }),
    [f, c, i]
  );
}
function Ie(e) {
  const t = (0, import_react.useRef)(() => {
    throw new Error("Cannot call an event handler while rendering.");
  });
  return J(() => {
    t.current = e;
  }, [e]), (0, import_react.useCallback)((s) => {
    var _a;
    return (_a = t.current) == null ? void 0 : _a.call(t, s);
  }, [t]);
}
var G = null;
function ve(e = false) {
  if (G === null || e) {
    const t = document.createElement("div"), s = t.style;
    s.width = "50px", s.height = "50px", s.overflow = "scroll", s.direction = "rtl";
    const r = document.createElement("div"), o = r.style;
    return o.width = "100px", o.height = "100px", t.appendChild(r), document.body.appendChild(t), t.scrollLeft > 0 ? G = "positive-descending" : (t.scrollLeft = 1, t.scrollLeft === 0 ? G = "negative" : G = "positive-ascending"), document.body.removeChild(t), G;
  }
  return G;
}
function X({
  containerElement: e,
  direction: t,
  isRtl: s,
  scrollOffset: r
}) {
  if (t === "horizontal" && s)
    switch (ve()) {
      case "negative":
        return -r;
      case "positive-descending": {
        if (e) {
          const { clientWidth: o, scrollLeft: n, scrollWidth: l } = e;
          return l - o - n;
        }
        break;
      }
    }
  return r;
}
function B(e, t = "Assertion error") {
  if (!e)
    throw console.error(t), Error(t);
}
function Y(e, t) {
  if (e === t)
    return true;
  if (!!e != !!t || (B(e !== void 0), B(t !== void 0), Object.keys(e).length !== Object.keys(t).length))
    return false;
  for (const s in e)
    if (!Object.is(t[s], e[s]))
      return false;
  return true;
}
function ce({
  cachedBounds: e,
  itemCount: t,
  itemSize: s
}) {
  if (t === 0)
    return 0;
  if (typeof s == "number")
    return t * s;
  {
    const r = e.get(
      e.size === 0 ? 0 : e.size - 1
    );
    B(r !== void 0, "Unexpected bounds cache miss");
    const o = (r.scrollOffset + r.size) / e.size;
    return t * o;
  }
}
function be({
  align: e,
  cachedBounds: t,
  index: s,
  itemCount: r,
  itemSize: o,
  containerScrollOffset: n,
  containerSize: l
}) {
  const c = ce({
    cachedBounds: t,
    itemCount: r,
    itemSize: o
  }), i = t.get(s), f = Math.max(
    0,
    Math.min(c - l, i.scrollOffset)
  ), d = Math.max(
    0,
    i.scrollOffset - l + i.size
  );
  switch (e === "smart" && (n >= d && n <= f ? e = "auto" : e = "center"), e) {
    case "start":
      return f;
    case "end":
      return d;
    case "center":
      return i.scrollOffset <= l / 2 ? 0 : i.scrollOffset + i.size / 2 >= c - l / 2 ? c - l : i.scrollOffset + i.size / 2 - l / 2;
    case "auto":
    default:
      return n >= d && n <= f ? n : n < d ? d : f;
  }
}
function oe({
  cachedBounds: e,
  containerScrollOffset: t,
  containerSize: s,
  itemCount: r,
  overscanCount: o
}) {
  const n = r - 1;
  let l = 0, c = -1, i = 0, f = -1, d = 0;
  for (; d < n; ) {
    const p = e.get(d);
    if (p.scrollOffset + p.size > t)
      break;
    d++;
  }
  for (l = d, i = Math.max(0, l - o); d < n; ) {
    const p = e.get(d);
    if (p.scrollOffset + p.size >= t + s)
      break;
    d++;
  }
  return c = Math.min(n, d), f = Math.min(r - 1, c + o), l < 0 && (l = 0, c = -1, i = 0, f = -1), {
    startIndexVisible: l,
    stopIndexVisible: c,
    startIndexOverscan: i,
    stopIndexOverscan: f
  };
}
function me({
  itemCount: e,
  itemProps: t,
  itemSize: s
}) {
  const r = /* @__PURE__ */ new Map();
  return {
    get(o) {
      for (B(o < e, `Invalid index ${o}`); r.size - 1 < o; ) {
        const l = r.size;
        let c;
        switch (typeof s) {
          case "function": {
            c = s(l, t);
            break;
          }
          case "number": {
            c = s;
            break;
          }
        }
        if (l === 0)
          r.set(l, {
            size: c,
            scrollOffset: 0
          });
        else {
          const i = r.get(l - 1);
          B(
            i !== void 0,
            `Unexpected bounds cache miss for index ${o}`
          ), r.set(l, {
            scrollOffset: i.scrollOffset + i.size,
            size: c
          });
        }
      }
      const n = r.get(o);
      return B(
        n !== void 0,
        `Unexpected bounds cache miss for index ${o}`
      ), n;
    },
    set(o, n) {
      r.set(o, n);
    },
    get size() {
      return r.size;
    }
  };
}
function we({
  itemCount: e,
  itemProps: t,
  itemSize: s
}) {
  return (0, import_react.useMemo)(
    () => me({
      itemCount: e,
      itemProps: t,
      itemSize: s
    }),
    [e, t, s]
  );
}
function Oe({
  containerSize: e,
  itemSize: t
}) {
  let s;
  switch (typeof t) {
    case "string": {
      B(
        t.endsWith("%"),
        `Invalid item size: "${t}"; string values must be percentages (e.g. "100%")`
      ), B(
        e !== void 0,
        "Container size must be defined if a percentage item size is specified"
      ), s = e * parseInt(t) / 100;
      break;
    }
    default: {
      s = t;
      break;
    }
  }
  return s;
}
function C({
  containerElement: e,
  containerStyle: t,
  defaultContainerSize: s = 0,
  direction: r,
  isRtl: o = false,
  itemCount: n,
  itemProps: l,
  itemSize: c,
  onResize: i,
  overscanCount: f
}) {
  const [d, p] = (0, import_react.useState)({
    startIndexVisible: 0,
    startIndexOverscan: 0,
    stopIndexVisible: -1,
    stopIndexOverscan: -1
  }), {
    startIndexVisible: T,
    startIndexOverscan: w,
    stopIndexVisible: V,
    stopIndexOverscan: O
  } = {
    startIndexVisible: Math.min(n - 1, d.startIndexVisible),
    startIndexOverscan: Math.min(n - 1, d.startIndexOverscan),
    stopIndexVisible: Math.min(n - 1, d.stopIndexVisible),
    stopIndexOverscan: Math.min(n - 1, d.stopIndexOverscan)
  }, { height: g = s, width: b = s } = ge({
    defaultHeight: r === "vertical" ? s : void 0,
    defaultWidth: r === "horizontal" ? s : void 0,
    element: e,
    mode: r === "vertical" ? "only-height" : "only-width",
    style: t
  }), k = (0, import_react.useRef)({
    height: 0,
    width: 0
  }), y = r === "vertical" ? g : b, a = Oe({ containerSize: y, itemSize: c });
  (0, import_react.useLayoutEffect)(() => {
    if (typeof i == "function") {
      const u = k.current;
      (u.height !== g || u.width !== b) && (i({ height: g, width: b }, { ...u }), u.height = g, u.width = b);
    }
  }, [g, i, b]);
  const x = we({
    itemCount: n,
    itemProps: l,
    itemSize: a
  }), z = (0, import_react.useCallback)(
    (u) => x.get(u),
    [x]
  ), S = (0, import_react.useCallback)(
    () => ce({
      cachedBounds: x,
      itemCount: n,
      itemSize: a
    }),
    [x, n, a]
  ), M = (0, import_react.useCallback)(
    (u) => {
      const I = X({
        containerElement: e,
        direction: r,
        isRtl: o,
        scrollOffset: u
      });
      return oe({
        cachedBounds: x,
        containerScrollOffset: I,
        containerSize: y,
        itemCount: n,
        overscanCount: f
      });
    },
    [
      x,
      e,
      y,
      r,
      o,
      n,
      f
    ]
  );
  J(() => {
    const u = (r === "vertical" ? e == null ? void 0 : e.scrollTop : e == null ? void 0 : e.scrollLeft) ?? 0;
    p(M(u));
  }, [e, r, M]), J(() => {
    if (!e)
      return;
    const u = () => {
      p((I) => {
        const { scrollLeft: h, scrollTop: v } = e, E = X({
          containerElement: e,
          direction: r,
          isRtl: o,
          scrollOffset: r === "vertical" ? v : h
        }), q = oe({
          cachedBounds: x,
          containerScrollOffset: E,
          containerSize: y,
          itemCount: n,
          overscanCount: f
        });
        return Y(q, I) ? I : q;
      });
    };
    return e.addEventListener("scroll", u), () => {
      e.removeEventListener("scroll", u);
    };
  }, [
    x,
    e,
    y,
    r,
    n,
    f
  ]);
  const L = Ie(
    ({
      align: u = "auto",
      containerScrollOffset: I,
      index: h
    }) => {
      let v = be({
        align: u,
        cachedBounds: x,
        containerScrollOffset: I,
        containerSize: y,
        index: h,
        itemCount: n,
        itemSize: a
      });
      if (e) {
        if (v = X({
          containerElement: e,
          direction: r,
          isRtl: o,
          scrollOffset: v
        }), typeof e.scrollTo != "function") {
          const E = M(v);
          Y(d, E) || p(E);
        }
        return v;
      }
    }
  );
  return {
    getCellBounds: z,
    getEstimatedSize: S,
    scrollToIndex: L,
    startIndexOverscan: w,
    startIndexVisible: T,
    stopIndexOverscan: O,
    stopIndexVisible: V
  };
}
function de(e) {
  return (0, import_react.useMemo)(() => e, Object.values(e));
}
function ae(e, t) {
  const {
    ariaAttributes: s,
    style: r,
    ...o
  } = e, {
    ariaAttributes: n,
    style: l,
    ...c
  } = t;
  return Y(s, n) && Y(r, l) && Y(o, c);
}
function Se({
  cellComponent: e,
  cellProps: t,
  children: s,
  className: r,
  columnCount: o,
  columnWidth: n,
  defaultHeight: l = 0,
  defaultWidth: c = 0,
  dir: i,
  gridRef: f,
  onCellsRendered: d,
  onResize: p,
  overscanCount: T = 3,
  rowCount: w,
  rowHeight: V,
  style: O,
  tagName: g = "div",
  ...b
}) {
  const k = de(t), y = (0, import_react.useMemo)(
    () => (0, import_react.memo)(e, ae),
    [e]
  ), [a, x] = (0, import_react.useState)(null), z = xe(a, i), {
    getCellBounds: S,
    getEstimatedSize: M,
    startIndexOverscan: L,
    startIndexVisible: u,
    scrollToIndex: I,
    stopIndexOverscan: h,
    stopIndexVisible: v
  } = C({
    containerElement: a,
    defaultContainerSize: c,
    direction: "horizontal",
    isRtl: z,
    itemCount: o,
    itemProps: k,
    itemSize: n,
    onResize: p,
    overscanCount: T
  }), {
    getCellBounds: E,
    getEstimatedSize: q,
    startIndexOverscan: F,
    startIndexVisible: se,
    scrollToIndex: Q,
    stopIndexOverscan: U,
    stopIndexVisible: re
  } = C({
    containerElement: a,
    defaultContainerSize: l,
    direction: "vertical",
    itemCount: w,
    itemProps: k,
    itemSize: V,
    onResize: p,
    overscanCount: T
  });
  (0, import_react.useImperativeHandle)(
    f,
    () => ({
      get element() {
        return a;
      },
      scrollToCell({
        behavior: R = "auto",
        columnAlign: m = "auto",
        columnIndex: W,
        rowAlign: A = "auto",
        rowIndex: $
      }) {
        const D = I({
          align: m,
          containerScrollOffset: (a == null ? void 0 : a.scrollLeft) ?? 0,
          index: W
        }), he = Q({
          align: A,
          containerScrollOffset: (a == null ? void 0 : a.scrollTop) ?? 0,
          index: $
        });
        typeof (a == null ? void 0 : a.scrollTo) == "function" && a.scrollTo({
          behavior: R,
          left: D,
          top: he
        });
      },
      scrollToColumn({
        align: R = "auto",
        behavior: m = "auto",
        index: W
      }) {
        const A = I({
          align: R,
          containerScrollOffset: (a == null ? void 0 : a.scrollLeft) ?? 0,
          index: W
        });
        typeof (a == null ? void 0 : a.scrollTo) == "function" && a.scrollTo({
          behavior: m,
          left: A
        });
      },
      scrollToRow({
        align: R = "auto",
        behavior: m = "auto",
        index: W
      }) {
        const A = Q({
          align: R,
          containerScrollOffset: (a == null ? void 0 : a.scrollTop) ?? 0,
          index: W
        });
        typeof (a == null ? void 0 : a.scrollTo) == "function" && a.scrollTo({
          behavior: m,
          top: A
        });
      }
    }),
    [a, I, Q]
  ), (0, import_react.useEffect)(() => {
    L >= 0 && h >= 0 && F >= 0 && U >= 0 && d && d(
      {
        columnStartIndex: u,
        columnStopIndex: v,
        rowStartIndex: se,
        rowStopIndex: re
      },
      {
        columnStartIndex: L,
        columnStopIndex: h,
        rowStartIndex: F,
        rowStopIndex: U
      }
    );
  }, [
    d,
    L,
    u,
    h,
    v,
    F,
    se,
    U,
    re
  ]);
  const fe = (0, import_react.useMemo)(() => {
    const R = [];
    if (o > 0 && w > 0)
      for (let m = F; m <= U; m++) {
        const W = E(m), A = [];
        for (let $ = L; $ <= h; $++) {
          const D = S($);
          A.push(
            (0, import_react.createElement)(
              y,
              {
                ...k,
                ariaAttributes: {
                  "aria-colindex": $ + 1,
                  role: "gridcell"
                },
                columnIndex: $,
                key: $,
                rowIndex: m,
                style: {
                  position: "absolute",
                  left: z ? void 0 : 0,
                  right: z ? 0 : void 0,
                  transform: `translate(${z ? -D.scrollOffset : D.scrollOffset}px, ${W.scrollOffset}px)`,
                  height: w > 1 ? W.size : "100%",
                  width: D.size
                }
              }
            )
          );
        }
        R.push(
          (0, import_jsx_runtime.jsx)("div", { role: "row", "aria-rowindex": m + 1, children: A }, m)
        );
      }
    return R;
  }, [
    y,
    k,
    o,
    L,
    h,
    S,
    E,
    z,
    w,
    F,
    U
  ]), ue = (0, import_jsx_runtime.jsx)(
    "div",
    {
      "aria-hidden": true,
      style: {
        height: q(),
        width: M(),
        zIndex: -1
      }
    }
  );
  return (0, import_react.createElement)(
    g,
    {
      "aria-colcount": o,
      "aria-rowcount": w,
      role: "grid",
      ...b,
      className: r,
      dir: i,
      ref: x,
      style: {
        position: "relative",
        width: "100%",
        height: "100%",
        maxHeight: "100%",
        maxWidth: "100%",
        flexGrow: 1,
        overflow: "auto",
        ...O
      }
    },
    fe,
    s,
    ue
  );
}
var Te = import_react.useState;
var Ve = import_react.useRef;
function ke({
  children: e,
  className: t,
  defaultHeight: s = 0,
  listRef: r,
  onResize: o,
  onRowsRendered: n,
  overscanCount: l = 3,
  rowComponent: c,
  rowCount: i,
  rowHeight: f,
  rowProps: d,
  tagName: p = "div",
  style: T,
  ...w
}) {
  const V = de(d), O = (0, import_react.useMemo)(
    () => (0, import_react.memo)(c, ae),
    [c]
  ), [g, b] = (0, import_react.useState)(null), {
    getCellBounds: k,
    getEstimatedSize: y,
    scrollToIndex: a,
    startIndexOverscan: x,
    startIndexVisible: z,
    stopIndexOverscan: S,
    stopIndexVisible: M
  } = C({
    containerElement: g,
    defaultContainerSize: s,
    direction: "vertical",
    itemCount: i,
    itemProps: V,
    itemSize: f,
    onResize: o,
    overscanCount: l
  });
  (0, import_react.useImperativeHandle)(
    r,
    () => ({
      get element() {
        return g;
      },
      scrollToRow({
        align: I = "auto",
        behavior: h = "auto",
        index: v
      }) {
        const E = a({
          align: I,
          containerScrollOffset: (g == null ? void 0 : g.scrollTop) ?? 0,
          index: v
        });
        typeof (g == null ? void 0 : g.scrollTo) == "function" && g.scrollTo({
          behavior: h,
          top: E
        });
      }
    }),
    [g, a]
  ), (0, import_react.useEffect)(() => {
    x >= 0 && S >= 0 && n && n(
      {
        startIndex: z,
        stopIndex: M
      },
      {
        startIndex: x,
        stopIndex: S
      }
    );
  }, [
    n,
    x,
    z,
    S,
    M
  ]);
  const L = (0, import_react.useMemo)(() => {
    const I = [];
    if (i > 0)
      for (let h = x; h <= S; h++) {
        const v = k(h);
        I.push(
          (0, import_react.createElement)(
            O,
            {
              ...V,
              ariaAttributes: {
                "aria-posinset": h + 1,
                "aria-setsize": i,
                role: "listitem"
              },
              key: h,
              index: h,
              style: {
                position: "absolute",
                left: 0,
                transform: `translateY(${v.scrollOffset}px)`,
                height: v.size,
                width: "100%"
              }
            }
          )
        );
      }
    return I;
  }, [
    O,
    k,
    i,
    V,
    x,
    S
  ]), u = (0, import_jsx_runtime.jsx)(
    "div",
    {
      "aria-hidden": true,
      style: {
        height: y(),
        width: "100%",
        zIndex: -1
      }
    }
  );
  return (0, import_react.createElement)(
    p,
    {
      role: "list",
      ...w,
      className: t,
      ref: b,
      style: {
        position: "relative",
        maxHeight: "100%",
        flexGrow: 1,
        overflowY: "auto",
        ...T
      }
    },
    L,
    e,
    u
  );
}
var Le = import_react.useState;
var Ee = import_react.useRef;
var Z = -1;
function Me(e = false) {
  if (Z === -1 || e) {
    const t = document.createElement("div"), s = t.style;
    s.width = "50px", s.height = "50px", s.overflow = "scroll", document.body.appendChild(t), Z = t.offsetWidth - t.clientWidth, document.body.removeChild(t);
  }
  return Z;
}
export {
  Se as Grid,
  ke as List,
  Me as getScrollbarSize,
  Te as useGridCallbackRef,
  Ve as useGridRef,
  Le as useListCallbackRef,
  Ee as useListRef
};
//# sourceMappingURL=react-window.js.map
